// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WatchVault.Infrastructure.Data;

#nullable disable

namespace WatchVault.Infrastructure.Data.Migrations
{
    [DbContext(typeof(WatchVaultDbContext))]
    [Migration("20250930124117_Change_RuntimeMinutes_In_Movie_To_Nullable")]
    partial class Change_RuntimeMinutes_In_Movie_To_Nullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WatchVault.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WatchVault.Domain.Entities.WatchList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("WatchLists");
                });

            modelBuilder.Entity("WatchVault.Domain.Entities.WatchListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnOrder(0);

                    b.Property<DateTime?>("AddedToWatchAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnOrder(2);

                    b.Property<Guid>("WatchListId")
                        .HasColumnType("uuid");

                    b.Property<int>("WatchStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("WatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.ComplexProperty<Dictionary<string, object>>("Movie", "WatchVault.Domain.Entities.WatchListItem.Movie#Movie", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Director")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Overview")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("PosterUrl")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime?>("ReleaseDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<int?>("RuntimeMinutes")
                                .HasColumnType("integer");

                            b1.Property<int>("SimklId")
                                .HasColumnType("integer");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Year")
                                .HasColumnType("integer");
                        });

                    b.HasKey("Id");

                    b.HasIndex("WatchListId");

                    b.ToTable("WatchListItems");
                });

            modelBuilder.Entity("WatchVault.Domain.Entities.WatchList", b =>
                {
                    b.HasOne("WatchVault.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("WatchVault.Domain.Entities.WatchList", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchVault.Domain.Entities.WatchListItem", b =>
                {
                    b.HasOne("WatchVault.Domain.Entities.WatchList", null)
                        .WithMany("Items")
                        .HasForeignKey("WatchListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchVault.Domain.Entities.WatchList", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
